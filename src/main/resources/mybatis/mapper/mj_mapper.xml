<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.human.springboot.mj_DAO">

	<select id="getProducts" resultType="com.human.springboot.mj_productDTO">
		select * from test_product
	</select>
	
	<select id="getBestProducts" resultType="com.human.springboot.mj_productDTO">
		select * from test_product
		where prod_created!=to_char(sysdate,'YYYYMMDD') 
		and prod_amount_sold/(to_date(to_char(sysdate,'YYYYMMDD'))-to_date(prod_created)) > 2
		order by 
		prod_amount_sold/(to_date(to_char(sysdate,'YYYYMMDD'))-to_date(prod_created))
		desc 
		
		<!-- 
		 위에처럼하면 하루에 하나 이상 팔린애들만, 판매율 높은 순서대로,
		 아래처럼하면 판매율 높은 순서대로 전상품
		 
		select * from test_product
		where prod_created!=to_char(sysdate,'YYYYMMDD')
		order by 
		prod_amount_sold/(to_date(to_char(sysdate,'YYYYMMDD'))-to_date(prod_created))
		desc;
				
		
		 -->	
	</select>
	
	
	<select id="getTop3" resultType="com.human.springboot.mj_productDTO">
		select*from(
		select*from test_product where prod_created!=to_char(sysdate,'YYYYMMDD') order by prod_amount_sold/(to_date(to_char(sysdate,'YYYYMMDD'))-to_date(prod_created)) desc
		) where rownum between 1 and 3
	</select>
	
		<select id="getNew3" resultType="com.human.springboot.mj_productDTO">
		select*from(
		select*from test_product order by prod_created desc)
		where rownum between 1 and 3
	</select>
	
	
	<select id="getNewProducts" resultType="com.human.springboot.mj_productDTO">
		<![CDATA[
		select * from test_product 
		where (to_date(to_char(sysdate,'YYYYMMDD')) - to_date(prod_created)) <=10
		order by prod_created desc
		]]>
		<!-- 
		select * from test_product
		order by prod_created desc  이렇게하면 그냥 그냥 전상품중에서 가장나중에나온순
		 -->
	</select>
	
	<select id="getKitchenProducts" resultType="com.human.springboot.mj_productDTO">
		select * from test_product where prod_category_code=1
	</select>
	
	<select id="getSeasonProducts" resultType="com.human.springboot.mj_productDTO">
		select * from test_product where prod_category_code=2
	</select>
	
	<select id="getHomeProducts" resultType="com.human.springboot.mj_productDTO">
		select * from test_product where prod_category_code=3
	</select>
	
	
	<!--  여기부터는 상품상세정보 -->
	
	
	<select id="getProduct" resultType="com.human.springboot.mj_productDTO">
		select * from test_product where prod_id=#{param1}
	</select>



	<select id="getReviews" resultType="com.human.springboot.mj_reviewDTO">
		select r.review_seq, r.member_seq mseq, m.member_id mid, r.review_rate, r.review_content
		from test_review r, test_member m
		where r.member_seq = m.member_seq and r.prod_id=#{param1} order by r.review_seq desc
	</select>


	<select id="getReviews2" resultType="int">
		select count(*) from test_review where member_seq=#{param1} and prod_id=#{param2}
	</select>

	<!--  여기부터는 주문정보  -->
	
	<select id="getMember" resultType="com.human.springboot.mj_memberDTO">
		select * from test_member where member_id=#{param1}
	</select>
	<select id="getMember2" resultType="com.human.springboot.mj_memberDTO">
		select * from test_member where member_seq=#{param1}
	</select>

	
	<!--  주문 -->
	
	<insert id="addOrder">
		insert into test_order values(test_order_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4},
		#{param5}, to_char(sysdate,'YYYYMMDD'), 'n', #{param6}, to_char(sysdate,'YYYYMMDD'), #{param7},
		#{param8}, #{param9},#{param10}
		)
	</insert>
	
	<update id="modifyInventory">
		update test_product 
		set prod_amount_sold = prod_amount_sold + #{param2}, 
			prod_amount = prod_amount - #{param2}
		where prod_id=#{param1}
	</update>




	<insert id="addCart">
		insert into test_cart values(test_cart_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4} )
	</insert>
	
	<delete id="deleteCart">
		delete from test_cart where cart_seq=#{param1}
	</delete>


	<select id="findOrder" resultType="com.human.springboot.mj_orderDTO">
		select * from test_order where member_seq=#{param1} and prod_id=#{param2} order by order_seq desc
	</select>

	<insert id="addReview">
		insert into test_review values(test_review_seq.nextval,
		 #{param1},#{param2},#{param3},#{param4},#{param5}) 
	</insert>
	
	<delete id="deleteReview">
		delete from test_review where review_seq = #{param1}
	</delete>
	

	<select id="getCart" resultType="com.human.springboot.mj_cartDTO">
		select c.cart_seq, c.prod_id pid, p.prod_name, p.prod_image, c.cart_qty, c.cart_price
		from test_cart c, test_product p
		where c.cart_seq=#{param1} and c.prod_id = p.prod_id
	</select>

	
	<update id="reviewRegister">
		update test_order set order_review='y' where member_seq=#{param1} and prod_id=#{param2}
	</update>
	
	<update id="reviewUnRegister">
		update test_order set order_review=null where member_seq=#{param1} and prod_id=#{param2}
	</update>

	<select id="getReviewRate" resultType="com.human.springboot.mj_reviewDTO">
		select avg(review_rate) review_rate from test_review where prod_id=#{param1}
	</select>
	
	
	<select id="getOrder" resultType="com.human.springboot.mj_orderDTO">
		select * from test_order where order_seq=#{param1}
	</select>
	
	
	<insert id="addChat">
		insert into chatting values(chat_seq.nextval, #{param1}, #{param2})
	</insert>
	
	<select id="showChat" resultType="com.human.springboot.mj_chatDTO">
		select * from chatting order by seq desc
	</select>
	
	<delete id="deleteChat">
		delete from chatting where seq=#{param1}
	</delete>
	
	
	
</mapper>

